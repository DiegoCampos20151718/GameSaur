{"ast":null,"code":"","map":{"version":3,"names":[],"sources":["C:/xampp/htdocs/gamesaur/components/Cart.tsx"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\r\n// import { View, Text, ScrollView, Image, StyleSheet, TouchableOpacity } from 'react-native';\r\n// import AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\n// interface CartItem {\r\n//   name: string;\r\n//   image: any; // Utiliza el tipo adecuado para las imÃ¡genes\r\n//   price: number;\r\n// }\r\n\r\n// const CartView: React.FC = () => {\r\n//   const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n\r\n//   useEffect(() => {\r\n//     const fetchCartItems = async () => {\r\n//       try {\r\n//         const items = await AsyncStorage.getItem('cartItems');\r\n//         if (items !== null) {\r\n//           setCartItems(JSON.parse(items));\r\n//         }\r\n//       } catch (error) {\r\n//         console.error('Error fetching cart items: ', error);\r\n//       }\r\n//     };\r\n\r\n//     fetchCartItems();\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     const updateCartItems = async () => {\r\n//       await AsyncStorage.setItem('cartItems', JSON.stringify(cartItems));\r\n//     };\r\n\r\n//     updateCartItems();\r\n//   }, [cartItems]);\r\n\r\n//   const removeFromCart = async (index: number) => {\r\n//     const newCartItems = [...cartItems];\r\n//     newCartItems.splice(index, 1);\r\n//     setCartItems(newCartItems);\r\n//   };\r\n\r\n//   return (\r\n//     <View style={styles.container}>\r\n//       <Text style={styles.title}>Shopping Cart</Text>\r\n//       <ScrollView>\r\n//         {cartItems.map((item, index) => (\r\n//           <CartItemView key={index} item={item} onRemove={() => removeFromCart(index)} />\r\n//         ))}\r\n//       </ScrollView>\r\n//     </View>\r\n//   );\r\n// };\r\n\r\n// interface CartItemProps {\r\n//   item: CartItem;\r\n//   onRemove: () => void;\r\n// }\r\n\r\n// const CartItemView: React.FC<CartItemProps> = ({ item, onRemove }) => {\r\n//   return (\r\n//     <View style={styles.cartItem}>\r\n//       <Image source={item.image} style={styles.image} />\r\n//       <View style={styles.itemDetails}>\r\n//         <Text style={styles.itemName}>{item.name}</Text>\r\n//         <Text style={styles.itemPrice}>${item.price.toFixed(2)}</Text>\r\n//       </View>\r\n//       <TouchableOpacity style={styles.removeButton} onPress={onRemove}>\r\n//         <Text style={styles.removeButtonText}>Eliminar</Text>\r\n//       </TouchableOpacity>\r\n//     </View>\r\n//   );\r\n// };\r\n\r\n// const styles = StyleSheet.create({\r\n//   container: {\r\n//     flex: 1,\r\n//     padding: 16,\r\n//   },\r\n//   title: {\r\n//     fontSize: 24,\r\n//     fontWeight: 'bold',\r\n//     marginBottom: 16,\r\n//   },\r\n//   cartItem: {\r\n//     flexDirection: 'row',\r\n//     alignItems: 'center',\r\n//     marginBottom: 16,\r\n//   },\r\n//   image: {\r\n//     width: 50,\r\n//     height: 50,\r\n//     borderRadius: 25,\r\n//   },\r\n//   itemDetails: {\r\n//     flex: 1,\r\n//     marginLeft: 16,\r\n//   },\r\n//   itemName: {\r\n//     fontSize: 16,\r\n//     fontWeight: 'bold',\r\n//   },\r\n//   itemPrice: {\r\n//     fontSize: 14,\r\n//     marginTop: 4,\r\n//   },\r\n//   removeButton: {\r\n//     backgroundColor: 'red',\r\n//     paddingHorizontal: 12,\r\n//     paddingVertical: 8,\r\n//     borderRadius: 8,\r\n//   },\r\n//   removeButtonText: {\r\n//     color: 'white',\r\n//   },\r\n// });\r\n\r\n// export default CartView;\r\n"],"mappings":""},"metadata":{},"sourceType":"script","externalDependencies":[]}