#!/usr/bin/env node
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "path", "@clack/prompts", "child_process"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getArgsData = exports.installDependencies = void 0;
    let supportedArgs = ['--use-npm', '--use-yarn', '--help', '-h', '--use-pnpm'];
    const path_1 = __importDefault(require("path"));
    const prompts_1 = require("@clack/prompts");
    const child_process_1 = require("child_process");
    function installDependencies(projectName, installationMethod) {
        const projectPath = path_1.default.join(process.cwd(), projectName);
        const s = (0, prompts_1.spinner)();
        s.start('⏳ Installing dependencies...');
        try {
            (0, child_process_1.spawnSync)(`mv gitignore .gitignore`, {
                cwd: projectPath,
                stdio: 'inherit',
                shell: true,
            });
        }
        catch (err) {
            prompts_1.log.error(`\x1b[31mError: gitignore file not found in template!\x1b[0m`);
        }
        try {
            (0, child_process_1.spawnSync)(`git init && ${installationMethod} && rm .npmignore`, {
                cwd: projectPath,
                stdio: 'inherit',
                shell: true,
            });
            s.stop(`\x1b[32mDependencies have been installed successfully.\x1b[0m`);
        }
        catch (err) {
            prompts_1.log.error(`\x1b[31mError: ${err}\x1b[0m`);
            prompts_1.log.error('\x1b[31mError installing dependencies:\x1b[0m');
            prompts_1.log.warning(` - Run \x1b[33m yarn \x1b[0m manually!`);
            throw new Error('Error installing dependencies.');
        }
    }
    exports.installDependencies = installDependencies;
    function getArgsData(args, customSupportedArgs) {
        let projectName = '';
        let installationMethod = '';
        // 'npm install --legacy-peer-deps';
        if (args.length > 0) {
            if (!(args[0].startsWith('-') || args[0].startsWith('--'))) {
                if (typeof args[0] === 'string') {
                    projectName = args[0];
                }
            }
        }
        if (customSupportedArgs) {
            supportedArgs = customSupportedArgs;
        }
        for (let i = projectName !== '' ? 1 : 0; i < args.length; i++) {
            if (supportedArgs.includes(args[i])) {
                if (args[i] === '--help' || args[i] === '-h') {
                    console.log(`
              Usage: create-next-app-with-gluestack-ui [project-name] [options]

              Options:
                -h, --help          output usage information
                --use-npm           use npm to install dependencies
                --use-yarn          use yarn to install dependencies
                --use-pnpm          use pnpm to install dependencies
              `);
                    process.exit(0);
                }
                else if (args[i] === '--use-npm' || args[i] === 'use-npm') {
                    installationMethod = 'npm install --legacy-peer-deps';
                }
                else if (args[i] === '--use-yarn' || args[i] === 'use-yarn') {
                    installationMethod = 'yarn';
                }
                else if (args[i] === '--use-pnpm' || args[i] === 'use-pnpm') {
                    installationMethod = 'pnpm i --lockfile-only';
                }
            }
            else {
                if (!(args[i].startsWith('-') || args[i].startsWith('--'))) {
                    prompts_1.log.warning(`Please pass project name as first argument.`);
                }
                prompts_1.log.warning(`Unsupported argument: ${args[i]}. For more information run npm create gluestack --help`);
                process.exit(0);
            }
        }
        return { installationMethod, projectName };
    }
    exports.getArgsData = getArgsData;
});
