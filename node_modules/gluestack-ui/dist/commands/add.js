var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "commander", "zod", "../util/handle-error", "path", "fs", "@clack/prompts", "../util/add-components"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.add = void 0;
    const commander_1 = require("commander");
    const zod_1 = require("zod");
    const handle_error_1 = require("../util/handle-error");
    const path_1 = __importDefault(require("path"));
    const fs_1 = require("fs");
    const prompts_1 = require("@clack/prompts");
    const add_components_1 = require("../util/add-components");
    const addOptionsSchema = zod_1.z.object({
        components: zod_1.z.string().optional(),
        cwd: zod_1.z.string(),
        all: zod_1.z.boolean(),
        forceUpdate: zod_1.z.boolean(),
        useNpm: zod_1.z.boolean(),
        useYarn: zod_1.z.boolean(),
        usePnpm: zod_1.z.boolean(),
    });
    exports.add = new commander_1.Command()
        .name('add')
        .description('add a component to your project')
        .argument('[...components]', 'the components to add')
        .option('-c, --cwd <cwd>', 'the working directory. defaults to the current directory.', process.cwd())
        .option('--all, --all', 'add all available components', false)
        .option('-f, --force-update', 'force update the component.', false)
        .option('--use-npm ,useNpm', 'use npm to install dependencies', false)
        .option('--use-yarn, useYarn', 'use yarn to install dependencies', false)
        .option('--use-pnpm, usePnpm', 'use pnpm to install dependencies', false)
        .action((components, opts, command) => __awaiter(void 0, void 0, void 0, function* () {
        var _a;
        try {
            if (command.args.length > 1) {
                prompts_1.log.error('\x1b[31mOnly one component can be provided at a time, please provide the component name you want to add or --all.\x1b[0m');
                process.exit(1);
            }
            const options = addOptionsSchema.parse(Object.assign({ components: components !== null && components !== void 0 ? components : '' }, opts));
            if (options.all === false &&
                (options.components === '' || options.components === undefined)) {
                prompts_1.log.error('\x1b[31mInvalid arguement, please provide the component name you want to add or --all.\x1b[0m');
                process.exit(0);
            }
            let installationMethod;
            if (options.useNpm || options.useYarn || options.usePnpm) {
                if (options.useNpm)
                    installationMethod = 'npm';
                if (options.usePnpm)
                    installationMethod = 'pnpm';
                if (options.useYarn)
                    installationMethod = 'yarn';
            }
            const cwd = path_1.default.resolve(options.cwd);
            if (!(0, fs_1.existsSync)(cwd)) {
                prompts_1.log.error(`The path ${cwd} does not exist. Please try again.`);
                process.exit(1);
            }
            if (options.all) {
                try {
                    yield (0, add_components_1.componentAdder)({
                        requestedComponent: '--all',
                        installationMethod: installationMethod,
                    });
                }
                catch (err) {
                    prompts_1.log.error(`\x1b[31mError: ${err.message}\x1b[0m`);
                }
            }
            else {
                yield (0, add_components_1.componentAdder)({
                    requestedComponent: (_a = options.components) === null || _a === void 0 ? void 0 : _a.toLowerCase(),
                    installationMethod: installationMethod,
                });
            }
        }
        catch (err) {
            (0, handle_error_1.handleError)(err);
        }
    }));
});
