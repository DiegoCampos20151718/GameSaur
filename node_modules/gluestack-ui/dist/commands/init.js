var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "commander", "zod", "../util/handle-error", "path", "fs", "@clack/prompts", "../util/init-gluestack"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.init = void 0;
    const commander_1 = require("commander");
    const zod_1 = require("zod");
    const handle_error_1 = require("../util/handle-error");
    const path_1 = __importDefault(require("path"));
    const fs_1 = require("fs");
    const prompts_1 = require("@clack/prompts");
    const init_gluestack_1 = require("../util/init-gluestack");
    const initOptionsSchema = zod_1.z.object({
        cwd: zod_1.z.string(),
        useNpm: zod_1.z.boolean(),
        useYarn: zod_1.z.boolean(),
        usePnpm: zod_1.z.boolean(),
    });
    exports.init = new commander_1.Command()
        .name('init')
        .description('Initialize gluestack into your project')
        .option('-c, --cwd <cwd>', 'the working directory. defaults to the current directory.', process.cwd())
        .option('--use-npm ,useNpm', 'use npm to install dependencies', false)
        .option('--use-yarn, useYarn', 'use yarn to install dependencies', false)
        .option('--use-pnpm, usePnpm', 'use pnpm to install dependencies', false)
        .action((opts) => __awaiter(void 0, void 0, void 0, function* () {
        try {
            const options = initOptionsSchema.parse(Object.assign({}, opts));
            let installationMethod;
            if (options.useNpm || options.useYarn || options.usePnpm) {
                if (options.useNpm)
                    installationMethod = 'npm';
                if (options.usePnpm)
                    installationMethod = 'pnpm';
                if (options.useYarn)
                    installationMethod = 'yarn';
            }
            const cwd = path_1.default.resolve(options.cwd);
            if (!(0, fs_1.existsSync)(cwd)) {
                prompts_1.log.error(`The path ${cwd} does not exist. Please try again.`);
                process.exit(1);
            }
            (0, init_gluestack_1.InitializeGlueStack)({
                installationMethod,
            });
        }
        catch (err) {
            (0, handle_error_1.handleError)(err);
        }
    }));
});
