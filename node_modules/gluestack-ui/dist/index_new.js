#!/usr/bin/env node
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "commander", "./utils/get-package-info", "./commands/add"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const commander_1 = require("commander");
    const get_package_info_1 = require("./utils/get-package-info");
    const add_1 = require("./commands/add");
    process.on('SIGINT', () => process.exit(0));
    process.on('SIGTERM', () => process.exit(0));
    function main() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('Hello, World!');
            const packageInfo = yield (0, get_package_info_1.getPackageInfo)();
            const program = new commander_1.Command().name('gluestack-ui');
            console.log('packageInfo', packageInfo, packageInfo.version);
            program.addCommand(add_1.add);
            program.parse();
        });
    }
    main();
});
