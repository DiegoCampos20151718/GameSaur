var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "fs", "path", ".", "@clack/prompts", "../config"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.promptComponentStyle = exports.getComponentStyle = exports.generateConfigAndInstallDependencies = void 0;
    const fs = __importStar(require("fs"));
    const path = __importStar(require("path"));
    const _1 = require(".");
    const prompts_1 = require("@clack/prompts");
    const config_1 = require("../config");
    const currDir = process.cwd();
    let installDependencies = [];
    // Function to parse imports from a TypeScript file
    function parseImports(filePath) {
        const content = fs.readFileSync(filePath, 'utf-8');
        const imports = content.match(/import\s+(?:([\w{},\s]+)\s+from\s+)?(['"])([^'"]+)\2;/g);
        if (imports) {
            return imports
                .map((importStatement) => {
                const importPath = importStatement.match(/(['"])([^'"]+)\1/)[2];
                // Exclude imports from current directory (./) or parent directory (../)
                if (!importPath.startsWith('./') && !importPath.startsWith('../')) {
                    return importPath;
                }
            })
                .filter(Boolean); // Filter out undefined values
        }
        return [];
    }
    // Function to generate config files for each component
    function generateConfig(rootDir, currentComponent) {
        return __awaiter(this, void 0, void 0, function* () {
            const componentConfig = {
                installDependencies: [],
            };
            const componentImports = parseImports(path.join(rootDir, currentComponent, 'index.tsx'));
            componentImports.forEach((importedPackage) => {
                if (importedPackage.startsWith(config_1.config.gluestackUIPattern) &&
                    !importedPackage.startsWith(config_1.config.nativewindUtilPattern)) {
                    const componentName = importedPackage.split('/')[1];
                    if (currentComponent === config_1.config.providerComponent &&
                        componentName !== undefined) {
                        installDependencies.push(importedPackage);
                    }
                    if (componentName !== undefined) {
                        componentConfig.installDependencies.push(importedPackage);
                    }
                }
                else {
                    if (!installDependencies.includes(importedPackage) &&
                        !importedPackage.startsWith(config_1.config.nativewindUtilPattern)) {
                        installDependencies.push(importedPackage);
                    }
                }
            });
            if (currentComponent !== config_1.config.providerComponent)
                fs.writeFileSync(path.join(rootDir, currentComponent, 'config.json'), JSON.stringify(componentConfig, null, 2));
        });
    }
    // Function to fetch and install packages from config.json files
    function fetchAndInstallPackages(installationMethod) {
        return __awaiter(this, void 0, void 0, function* () {
            const componentsDir = path.join(currDir, 'components');
            let allPackages = [];
            // Read all directories in the components directory
            const componentDirectories = fs
                .readdirSync(componentsDir, { withFileTypes: true })
                .filter((dirent) => dirent.isDirectory())
                .map((dirent) => dirent.name);
            // Iterate over each component directory
            componentDirectories.forEach((componentName) => {
                const configPath = path.join(componentsDir, componentName, 'config.json');
                try {
                    const config = JSON.parse(fs.readFileSync(configPath, 'utf8'));
                    const { installDependencies } = config;
                    // Add installDependencies to allPackages array
                    allPackages.push(...installDependencies);
                }
                catch (error) {
                    prompts_1.log.error(`Error reading config.json for ${componentName}: ${error.message}`);
                }
            });
            yield (0, _1.installPackages)(installationMethod, allPackages);
            yield configCleanup(path.join(currDir, 'components'));
        });
    }
    //function to remove config.json files from components
    function configCleanup(directoryPath) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                // Read all files in the directory
                const entries = fs.readdirSync(directoryPath, { withFileTypes: true });
                // Filter out directories from the list of entries
                const directories = entries.filter((entry) => entry.isDirectory());
                // Iterate over each directory
                directories.forEach((directory) => {
                    const componentPath = path.join(directoryPath, directory.name);
                    const configPath = path.join(componentPath, 'config.json');
                    if (fs.existsSync(configPath)) {
                        fs.unlinkSync(configPath);
                    }
                });
            }
            catch (error) {
                prompts_1.log.error(`\x1b[31mError :  Error occurred during config cleanup: ${error.message}\x1b[0m`);
            }
        });
    }
    // Function to get dependencies from UIconfig file
    function getUIConfigDependencies(filePath) {
        return __awaiter(this, void 0, void 0, function* () {
            const fileImports = parseImports(filePath);
            fileImports.forEach((fileImports) => {
                if (!installDependencies.includes(fileImports)) {
                    installDependencies.push(fileImports);
                }
            });
        });
    }
    // Function to prompt user to select a component style
    function promptComponentStyle() {
        return __awaiter(this, void 0, void 0, function* () {
            const selectedStyle = yield (0, prompts_1.select)({
                message: 'Which style would you like to use in your project:',
                options: [
                    { value: config_1.config.gluestackStyleRootPath, label: 'gluestack-style' },
                    { value: config_1.config.nativeWindRootPath, label: 'NativeWind' },
                ],
            });
            if ((0, prompts_1.isCancel)(selectedStyle)) {
                (0, prompts_1.cancel)('Operation cancelled.');
                process.exit(0);
            }
            return selectedStyle;
        });
    }
    exports.promptComponentStyle = promptComponentStyle;
    // Function to get existing component style
    function getExistingComponentStyle() {
        return __awaiter(this, void 0, void 0, function* () {
            if (fs.existsSync(path.join(currDir, config_1.config.UIconfigPath))) {
                const fileContent = fs.readFileSync(path.join(currDir, config_1.config.UIconfigPath), 'utf8');
                // Define a regular expression pattern to match import statements
                const importPattern = new RegExp(`import {\\s*\\w+\\s*} from ['"]nativewind['"]`, 'g');
                if (importPattern.test(fileContent)) {
                    config_1.config.style = config_1.config.nativeWindRootPath;
                    return config_1.config.nativeWindRootPath;
                }
                else {
                    config_1.config.style = config_1.config.gluestackStyleRootPath;
                    return config_1.config.gluestackStyleRootPath;
                }
            }
        });
    }
    function getComponentStyle() {
        return __awaiter(this, void 0, void 0, function* () {
            // Read the contents of the file
            try {
                if (fs.existsSync(path.join(currDir, config_1.config.writableComponentsPath)) &&
                    fs.existsSync(path.join(currDir, config_1.config.UIconfigPath)))
                    getExistingComponentStyle();
                if (fs.existsSync(path.join(currDir, config_1.config.writableComponentsPath)) &&
                    !fs.existsSync(path.join(currDir, config_1.config.UIconfigPath))) {
                    const userInput = yield (0, prompts_1.text)({
                        message: `No file found as ${config_1.config.configFileName} in components folder, Enter path to your config file in your project, if exist:`,
                        validate(value) {
                            if (value.length === 0)
                                return `please enter a valid path`;
                        },
                    });
                    config_1.config.UIconfigPath = userInput.toString();
                    config_1.config.configFileName = config_1.config.UIconfigPath.split('/').pop();
                    if (fs.existsSync(path.join(currDir, config_1.config.UIconfigPath)))
                        getExistingComponentStyle();
                    else {
                        prompts_1.log.error(`\x1b[31mInvalid config path provided\x1b[0m`);
                        process.exit(1);
                    }
                }
                if (!fs.existsSync(path.join(currDir, config_1.config.writableComponentsPath))) {
                    prompts_1.log.warning(`\x1b[33mGluestack is not initialized in the project. use 'npx gluestack-ui init' or 'help' to continue.\x1b[0m`);
                    process.exit(1);
                }
            }
            catch (err) {
                prompts_1.log.error(`\x1b[31mError: ${err.message}\x1b[0m`);
            }
        });
    }
    exports.getComponentStyle = getComponentStyle;
    // Main function to start generating config files
    function generateConfigAndInstallDependencies({ rootDir, installationMethod, optionalPackages, }) {
        return __awaiter(this, void 0, void 0, function* () {
            if (optionalPackages) {
                installDependencies = optionalPackages;
            }
            const allComponents = yield fs.readdirSync(path.join(currDir, config_1.config.writableComponentsPath));
            allComponents.forEach((component) => {
                const componentPath = path.join(currDir, config_1.config.writableComponentsPath, component);
                const stats = fs.statSync(componentPath);
                if (stats.isDirectory()) {
                    generateConfig(rootDir, component);
                }
            });
            yield getUIConfigDependencies(path.join(currDir, config_1.config.UIconfigPath));
            if (fs.existsSync(path.join(rootDir, config_1.config.providerComponent))) {
                fs.writeFileSync(path.join(rootDir, config_1.config.providerComponent, 'config.json'), JSON.stringify({ installDependencies }, null, 2));
            }
            yield fetchAndInstallPackages(installationMethod);
        });
    }
    exports.generateConfigAndInstallDependencies = generateConfigAndInstallDependencies;
});
