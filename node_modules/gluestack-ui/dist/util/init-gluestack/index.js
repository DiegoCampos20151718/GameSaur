var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "../create-config", "../../config", "os", "..", "fs-extra", "path", "@clack/prompts", "util"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InitializeGlueStack = void 0;
    const create_config_1 = require("../create-config");
    const config_1 = require("../../config");
    const os_1 = __importDefault(require("os"));
    const __1 = require("..");
    const fs_extra_1 = __importDefault(require("fs-extra"));
    const path_1 = __importDefault(require("path"));
    const prompts_1 = require("@clack/prompts");
    const util_1 = require("util");
    const currDir = process.cwd();
    const homeDir = os_1.default.homedir();
    const InitializeGlueStack = ({ installationMethod = '', }) => __awaiter(void 0, void 0, void 0, function* () {
        try {
            yield (0, __1.cloneRepositoryAtRoot)();
            const initializeStatus = yield (0, __1.checkIfFolderExists)(path_1.default.join(currDir, config_1.config.writableComponentsPath, config_1.config.providerComponent));
            if (initializeStatus) {
                prompts_1.log.info(`\x1b[33mGluestack is already initialized in the project, use 'npx gluestack-ui help' command to continue\x1b[0m`);
                process.exit(1);
            }
            const componentStyle = yield (0, create_config_1.promptComponentStyle)();
            if (typeof componentStyle === 'string') {
                config_1.config.style = componentStyle;
            }
            yield addProvider();
            if (config_1.config.style === config_1.config.nativeWindRootPath) {
                yield (0, create_config_1.generateConfigAndInstallDependencies)({
                    rootDir: path_1.default.join(currDir, config_1.config.writableComponentsPath),
                    installationMethod: installationMethod,
                    optionalPackages: config_1.config.nativeWindDependencies,
                });
                yield nativeWindInit();
            }
            else {
                yield (0, create_config_1.generateConfigAndInstallDependencies)({
                    rootDir: path_1.default.join(currDir, config_1.config.writableComponentsPath),
                    installationMethod: installationMethod,
                });
            }
        }
        catch (err) {
            prompts_1.log.error(`\x1b[31mError: gitignore file not found in template!\x1b[0m`);
        }
    });
    exports.InitializeGlueStack = InitializeGlueStack;
    function addProvider() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield fs_extra_1.default.ensureDir(path_1.default.join(currDir, config_1.config.writableComponentsPath, config_1.config.providerComponent));
                yield fs_extra_1.default.copy(path_1.default.join(homeDir, config_1.config.gluestackDir, config_1.config.componentsResourcePath, config_1.config.style, config_1.config.providerComponent), path_1.default.join(currDir, config_1.config.writableComponentsPath, config_1.config.providerComponent));
                (0, __1.addIndexFile)(path_1.default.join(currDir, config_1.config.writableComponentsPath));
            }
            catch (err) {
                prompts_1.log.error(`\x1b[31mError: gitignore file not found in template!\x1b[0m`);
            }
        });
    }
    function nativeWindInit() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield fs_extra_1.default.ensureFile(path_1.default.join(homeDir, config_1.config.gluestackDir, config_1.config.tailwindConfigRootPath));
                yield fs_extra_1.default.copy(path_1.default.join(homeDir, config_1.config.gluestackDir, config_1.config.tailwindConfigRootPath), path_1.default.join(currDir, 'tailwind.config.js'));
                yield updateTSConfigPaths();
            }
            catch (err) {
                prompts_1.log.error(`\x1b[31mError: gitignore file not found in template!\x1b[0m`);
            }
        });
    }
    const readFileAsync = (0, util_1.promisify)(fs_extra_1.default.readFile);
    const writeFileAsync = (0, util_1.promisify)(fs_extra_1.default.writeFile);
    function updateTSConfigPaths() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const tsConfigPath = 'tsconfig.json'; // Path to your tsconfig.json file
                let tsConfig = {};
                if (fs_extra_1.default.existsSync(path_1.default.join(currDir, tsConfigPath))) {
                    const rawData = yield readFileAsync(path_1.default.join(currDir, tsConfigPath), 'utf8');
                    tsConfig = JSON.parse(rawData);
                }
                else {
                    yield fs_extra_1.default.ensureFile(path_1.default.join(currDir, tsConfigPath));
                    tsConfig = {
                        compilerOptions: {},
                    };
                }
                if (!tsConfig.compilerOptions) {
                    tsConfig.compilerOptions = {};
                }
                if (!tsConfig.compilerOptions.paths) {
                    // Case 1: Paths do not exist, add new paths
                    tsConfig.compilerOptions.paths = {
                        '@/*': ['./src/*'],
                    };
                }
                else {
                    // Case 2 & 3: Paths exist, update them without undoing previous values
                    tsConfig.compilerOptions.paths['@/*'] = ['./src/*'];
                }
                yield writeFileAsync(tsConfigPath, JSON.stringify(tsConfig, null, 2), 'utf8');
            }
            catch (err) {
                prompts_1.log.error(`\x1b[31mError: gitignore file not found in template!\x1b[0m`);
            }
        });
    }
});
