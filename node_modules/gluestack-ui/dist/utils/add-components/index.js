var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "path"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.componentAdder = void 0;
    const path_1 = __importDefault(require("path"));
    const { execAsync } = require('child_process');
    const currDir = process.cwd();
    const repoUrl = 'https://github.com/gluestack/gluestack-ui.git';
    const componentAdder = (requestedComponent = '', showWarning = true, isUpdate = false, forceUpdate = false) => __awaiter(void 0, void 0, void 0, function* () {
        const tempFolderPath = path_1.default.join(currDir, 'temp');
        console.log('tempFolderPath', tempFolderPath);
    });
    exports.componentAdder = componentAdder;
    const cloneRepository = (repoUrl, destinationPath) => __awaiter(void 0, void 0, void 0, function* () {
        try {
            yield execAsync(`git clone ${repoUrl} ${destinationPath}`);
            console.log('Repository cloned successfully.');
        }
        catch (error) {
            console.error('Error:', error);
        }
    });
    function deleteClonedRepository(clonedRepoPath) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield execAsync(`rm -rf ${clonedRepoPath}`);
                console.log('Cloned repository deleted successfully.');
            }
            catch (error) {
                console.error('Error:', error);
            }
        });
    }
});
